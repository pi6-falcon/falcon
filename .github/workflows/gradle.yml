# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Falcon Build & Deployment

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          python-version: '3.9'
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: aws-actions/setup-sam@v1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
      - name: Setup local DynamoDB
        run: docker run -p 8000:8000 amazon/dynamodb-local &
      - name: Installing dependencies
        run: npm install
      - name: Waiting for dynamo to boot up
        run: node ./wait-for-dynamo.js
      - name: Creating user table
        run: aws dynamodb create-table --endpoint-url http://localhost:8000 --table-name user --attribute-definitions AttributeName=username,AttributeType=S --key-schema AttributeName=username,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
      - name: Creating url table
        run: aws dynamodb create-table --endpoint-url http://localhost:8000 --table-name url --attribute-definitions AttributeName=short_url,AttributeType=S --key-schema AttributeName=short_url,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
      - name: Creating redirect_history table
        run: aws dynamodb create-table --endpoint-url http://localhost:8000 --table-name redirect_history --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        run: ./gradlew test --debug
      - name: Sonar Cloud Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info
      - name: Verifying coverage
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          on-missing-report: fail
          badges-directory: .github/badges
          fail-if-coverage-less-than: 70

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      - name: Generating Application Version
        run: echo "FALCON_VERSION=$(basename build/libs/*.jar .jar)" >> $GITHUB_ENV && echo "DEPLOYMENT_LOCATION=build/libs/$(basename build/libs/*.jar)" >> $GITHUB_ENV
      - name: Deploying to AWS
        uses: einaregilsson/beanstalk-deploy@v17
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          region: us-east-2
          application_name: falcon
          environment_name: Falcon-env
          version_label: ${{ env.FALCON_VERSION }}
          deployment_package: ${{ env.DEPLOYMENT_LOCATION }}
          version_description: ${{github.SHA}}
